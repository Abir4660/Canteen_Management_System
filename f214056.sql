------------------------------------------------------------
-- DROP old objects if exist (to avoid ORA-00955 errors)
------------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE ORDER_ITEMS CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE PAYMENTS CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE ORDERS CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE MENU CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE USERS CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

------------------------------------------------------------
-- CREATE TABLES
------------------------------------------------------------

-- Users
CREATE TABLE USERS (
    USER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USERNAME VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(50) NOT NULL,
    ROLE VARCHAR2(20) CHECK (ROLE IN ('ADMIN','CUSTOMER'))
);

-- Menu Items
CREATE TABLE MENU (
    ITEM_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ITEM_NAME VARCHAR2(100) NOT NULL,
    PRICE NUMBER(6,2) NOT NULL,
    AVAILABLE CHAR(1) DEFAULT 'Y' CHECK (AVAILABLE IN ('Y','N'))
);

-- Orders
CREATE TABLE ORDERS (
    ORDER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER REFERENCES USERS(USER_ID),
    ORDER_DATE DATE DEFAULT SYSDATE,
    STATUS VARCHAR2(20) DEFAULT 'PENDING' 
        CHECK (STATUS IN ('PENDING','PROCESSING','SERVED','CANCELLED'))
);

-- Order Items
CREATE TABLE ORDER_ITEMS (
    ORDER_ITEM_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ORDER_ID NUMBER REFERENCES ORDERS(ORDER_ID),
    ITEM_ID NUMBER REFERENCES MENU(ITEM_ID),
    QUANTITY NUMBER(3) DEFAULT 1
);

-- Payments
CREATE TABLE PAYMENTS (
    PAYMENT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ORDER_ID NUMBER REFERENCES ORDERS(ORDER_ID),
    AMOUNT NUMBER(8,2) NOT NULL,
    PAYMENT_DATE DATE DEFAULT SYSDATE,
   METHOD VARCHAR2(20) DEFAULT 'CASH'
        CHECK (METHOD IN ('CASH','CARD','ONLINE')),
    STATUS VARCHAR2(20) DEFAULT 'PENDING'
        CHECK (STATUS IN ('PENDING','SUCCESS','FAILED')),
    CHANGE_RETURN NUMBER(8,2) DEFAULT 0
    
);


------------------------------------------------------------
-- FUNCTION: Calculate total of an order
------------------------------------------------------------
CREATE OR REPLACE FUNCTION GET_ORDER_TOTAL(p_order_id NUMBER)
RETURN NUMBER IS
    v_total NUMBER := 0;
BEGIN
    SELECT SUM(oi.QUANTITY * m.PRICE)
    INTO v_total
    FROM ORDER_ITEMS oi
    JOIN MENU m ON oi.ITEM_ID = m.ITEM_ID
    WHERE oi.ORDER_ID = p_order_id;

    RETURN NVL(v_total, 0);
END;
/

------------------------------------------------------------
-- TRIGGER: Validate payments
------------------------------------------------------------
CREATE OR REPLACE TRIGGER TRG_VALIDATE_PAYMENT
BEFORE INSERT OR UPDATE ON PAYMENTS
FOR EACH ROW
DECLARE
    v_total NUMBER;
BEGIN
    -- Calculate order total
    v_total := GET_ORDER_TOTAL(:NEW.ORDER_ID);

    -- If payment is less than total → reject
    IF :NEW.AMOUNT < v_total THEN
        RAISE_APPLICATION_ERROR(-20001, '❌ Payment is less than order total. Order cannot be processed.');
    END IF;

    -- If payment is greater → store change
    IF :NEW.AMOUNT > v_total THEN
        :NEW.CHANGE_RETURN := :NEW.AMOUNT - v_total;
    ELSE
        :NEW.CHANGE_RETURN := 0;
    END IF;

    -- Mark as success
    :NEW.STATUS := 'SUCCESS';
  UPDATE ORDERS
    SET STATUS = 'SERVED'
    WHERE ORDER_ID = :NEW.ORDER_ID;
END;
/
